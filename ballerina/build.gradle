/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - rabbitmq Ballerina Generator'

def packageName = "rabbitmq"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    platform = "java17"
}

configurations {
    externalJars
}

dependencies {
    externalJars (group: 'com.rabbitmq', name: 'amqp-client', version: "${amqpClientVersion}") {
        transitive = false
    }
    externalJars(group: 'io.ballerina.stdlib', name: 'constraint-native', version: "${stdlibConstraintVersion}")
}

task updateTomlFiles {
    doLast {
        def amqpClientVersion = project.amqpClientVersion

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        def constraintVersion = stripBallerinaExtensionVersion("${project.stdlibConstraintVersion}")
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@amqp.client.version@", amqpClientVersion)
        newConfig = newConfig.replace("@constraint.native.version@", stdlibConstraintVersion)
        newConfig = newConfig.replace("@constraint.version@", constraintVersion)

        ballerinaTomlFile.text = newConfig

        def newPluginConfig = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        compilerPluginTomlFile.text = newPluginConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml CompilerPlugin.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml CompilerPlugin.toml Dependencies.toml"
            }
        }
    }
}

task startRabbitmqServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_rabbitmq-1_1"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("server_rabbitmq-1_1")) {
                println "Starting RabbitMQ server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/server/docker-compose.yaml up -d"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(10 * 1000)
            } else {
                println "RabbitMQ server is already started."
            }
        }
    }
}

task stopRabbitmqServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_rabbitmq-1_1"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("server_rabbitmq-1_1")) {
                println "Stopping RabbitMQ server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/server/docker-compose.yaml rm -svf"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "RabbitMQ server is not started."
            }
        }
    }
}

clean {
    delete 'build'
}

build.dependsOn copyToLib
build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn startRabbitmqServer
build.finalizedBy stopRabbitmqServer
publish.dependsOn build
